AWSTemplateFormatVersion: "2010-09-09"
Description: Sonrai Security - Jira Integration
Parameters:
  #: Required
  SonraiToken:
    Description: "Retrieve a Sonrai GraphQL token from the Advanced Search at https://crc.sonraisecurity.com/App/GraphExplorer using the command: { getApiToken { token , expiry }}"
    Type: "String"
    NoEcho: true
  CodeS3Bucket:
    Description: "S3 Bucket containing the code archive file from Sonrai.  Bucket names must be unique across all AWS accounts"
    Type: "String"
  CodeS3Key:
    Description: "S3 Zipfile containing code from Sonrai.  This would have been included in an email or downloaded"
    Type: "String"
    Default: "sonrai-integration.zip"
  JIRACloudURL:
    Description: "Jira Cloud Instance Address - ie: https://yourjiracloudinstance.atlassian.net "
    Type: "String"
    Default: ""
  JIRACloudUser:
    Description: "Jira Cloud Username (email address)"
    Type: "String"
  JIRACloudUserToken:
    Description: "Jira Cloud API Token - Tokens can be generated at https://id.atlassian.com/manage/api-tokens"
    Type: "String"
    NoEcho: true
  JIRACloudAlertProject:
    Description: "Jira Cloud - Project to create alerts in.  You may want to start with at test project during initial setup & tuning "
    Type: "String"
  JIRACloudTicketClosedStatus:
    Description: "Jira Cloud - Closed Status (Done).  Alerts marked with this status are ignored and a new alert created if incident reoccurs"
    Type: "String"
    Default: "Done"
  JIRACloudTicketType:
    Description: "Jira Cloud - Issue Type (Task).  This type is used to create new entries in Jira."
    Type: "String"
    Default: "Task"
  JIRALimitTicketsPerPolicy:
    Description: "Maximum number of alerts per policy to create Jira tickets for.  Recommend a limit of 10 during tuning, then increase as required. Use -1 for no limit."
    Type: "String"
    Default: "10"

  #: Optional
  APISleep:
    Description: "Pause between Jira connections to avoid overloading the service.  Note, a large number of alerts may take longer than the 1 hour schedule if set too high. "
    Type: "String"
    Default: "0.5"
  Schedule:
    Description: "Invocation Schedule/Frequency.  Default is one hour, the same time period as the Sonrai Policy engine.  Leave this at 1 hour"
    Type: "String"
    Default: "rate(1 hour)"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Parameters"
        Parameters:
          - SonraiToken
          - CodeS3Bucket
          - CodeS3Key
          - JIRACloudURL
          - JIRACloudUser
          - JIRACloudUserToken
          - JIRACloudAlertProject
          - JIRACloudTicketClosedStatus
          - JIRACloudTicketType
          - JIRALimitTicketsPerPolicy
      - Label:
          default: "Optional Parameters"
        Parameters:
          - APISleep
          - Schedule
Outputs:
  LambdaFunctionARN:
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
  LambdaPolicyARN:
    Value:
      Ref: LambdaPolicy
  LambdaRoleARN:
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
Resources:
  #: This policy allows the lambda function to write its logs to CloudWatch and read this stack's secrets
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: "Sonrai Jira Integration - Lambda Policy"
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          #: Write invocation logs to CloudWatch
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/*'
          #: Read secrets from this stack's secret
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource: !Ref Secret
  #: This role is assumed by the lambda to obtain the above policy
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Sonrai Jira Integration - Lambda Role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      Path: /
  #: This lambda function assumes the above role
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Sonrai Jira Integration - Lambda Function"
      Environment:
        Variables:
          SECRET_ARN: !Ref Secret
          JIRACloudURL: !Ref JIRACloudURL
          JIRACloudUser: !Ref JIRACloudUser
          JIRACloudTicketClosedStatus: !Ref JIRACloudTicketClosedStatus
          JIRACloudTicketType: !Ref JIRACloudTicketType
          JIRALimitTicketsPerPolicy: !Ref JIRALimitTicketsPerPolicy
          JIRACloudAlertProject: !Ref JIRACloudAlertProject
          APISleep: !Ref APISleep
          SCHEDULE: !Ref Schedule
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Handler: "sonrai.jira.lmd.handle"
      Runtime: "python3.6"
      MemorySize: 128
      Timeout: 900
  #: This rule invokes the above lambda function at a specific interval
  LambdaFunctionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Sonrai Jira Integration - Lambda Execution Trigger"
      ScheduleExpression: !Ref Schedule
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: TargetFunctionV1
  #: This permission is what glues the above rule to the lambda
  LambdaFunctionRulePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - LambdaFunctionRule
          - Arn
  #: This secret store stores the sensitive parameters of this stack for use in the lambda
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      # Name: "SonraiJiraIntegration_Secrets"
      Name: !Sub '${AWS::StackName}_Secrets'
      Description: "Secret store for Sonrai Jira Integration - GraphQL Token (daily refresh), Jira API Key (unchanging)"
      SecretString: !Sub
        - '{ "SONRAI_TOKEN": "${SonraiToken}", "JIRACloudUserToken": "${JIRACloudUserToken}", "SEARCH_FROM": "" }'
        - { SonraiToken: !Ref SonraiToken}
      SecretString: !Sub
        - '{ "SONRAI_TOKEN": "${SonraiToken}", "JIRACloudUserToken": "${JIRACloudUserToken}", "SEARCH_FROM": "" }'
        - { JIRACloudUserToken: !Ref JIRACloudUserToken}
