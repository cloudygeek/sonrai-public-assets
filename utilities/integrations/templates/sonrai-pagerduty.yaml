AWSTemplateFormatVersion: "2010-09-09"
Description: Sonrai Security - Client K8 Cluster Role
Parameters:
  #: Required
  PDToken:
    Description: "PagerDuty integration token"
    Type: "String"
    #AllowedPattern: ".+"
    NoEcho: true
    #: Default: __PD_TOKEN__
  SonraiToken:
    Description: "Sonrai GraphQL token"
    Type: "String"
    #AllowedPattern: ".+"
    NoEcho: true
    #: Default: __SONRAI_TOKEN__
  #: Optional
  Schedule:
    Description: "Invocation Schedule/Frequency"
    Type: "String"
    Default: "rate(1 hour)"
  CodeS3Bucket:
    Description: "S3 Bucket containing the lambda code"
    Type: "String"
    Default: "sonrai-integration"
  CodeS3Key:
    Description: "S3 Key containing the lambda code"
    Type: "String"
    Default: "sonrai-integration.zip"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required Parameters"
        Parameters:
          - PDToken
          - SonraiToken
      - Label:
          default: "Optional Parameters"
        Parameters:
          - CodeS3Bucket
          - CodeS3Key
Outputs:
  LambdaFunctionARN:
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
  LambdaPolicyARN:
    Value:
      Ref: LambdaPolicy
  LambdaRoleARN:
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
Resources:
  #: This policy allows the lambda function to write its logs to CloudWatch and read this stack's secrets
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: "Sonrai PagerDuty Integration - Lambda Policy"
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          #: Write invocation logs to CloudWatch
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':*'
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Join
              - ''
              - - 'arn:aws:logs:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':log-group:/aws/lambda/*'
          #: Read secrets from this stack's secret
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
            Resource: !Ref Secret
  #: This role is assumed by the lambda to obtain the above policy
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Sonrai PagerDuty Integration - Lambda Role"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      Path: /
  #: This lambda function assumes the above role
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Sonrai PagerDuty Integration - Lambda Function"
      Environment:
        Variables:
          SECRET_ARN: !Ref Secret
          SCHEDULE: !Ref Schedule
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Handler: "sonrai.pagerduty.lmd.handle"
      Runtime: "python3.6"
      MemorySize: 128
      Timeout: 900
  #: This rule invokes the above lambda function at a specific interval
  LambdaFunctionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Sonrai PagerDuty Integration - Lambda Execution Trigger"
      ScheduleExpression: !Ref Schedule
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaFunction
              - Arn
          Id: TargetFunctionV1
  #: This permission is what glues the above rule to the lambda
  LambdaFunctionRulePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: 
        Fn::GetAtt: 
          - LambdaFunctionRule
          - Arn
  #: This secret store stores the sensitive parameters of this stack for use in the lambda
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Sonrai PagerDuty Integration - Secrets"
      SecretString: !Sub
        - '{"SONRAI_TOKEN": "${SonraiToken}","PAGERDUTY_INTEGRATION_TOKEN":"${PDToken}", "SEARCH_FROM": ""}'
        - { SonraiToken: !Ref SonraiToken, PDToken: !Ref PDToken }
